{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Clock","props","hasPower","react_default","a","createElement","className","dist_default","interval","format","PowerButton","onClick","AlarmButton","ChangeStationButton","GenericInput","placeHolder","display","shouldShow","currentFunction","style","textAlign","type","placeholder","handleNewInput","Tuner","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","numberOfStations","stations","populateStations","newStations","slice","i","stationNumber","Math","random","toFixed","stationKey","sort","b","Number","setState","stationItems","map","station","key","tunerParentClass","tunerClass","React","Component","AlarmBox","_this2","currentStation","alarm","canInputData","input","_this3","handlePowerButtonClick","App_Tuner","handleAlarmButtonClick","handleSetStationClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e25b5a5c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Moment from 'react-moment';\n\nfunction Clock(props) {\n  // conditional rendering\n  if (props.hasPower) {\n    return (\n      <div className=\"clock power-shadow\">\n        <div className='clock-display has-power'><Moment interval=\"{60000}\" format=\"hh:mm:ss\"></Moment></div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"clock\">\n      <div className='clock-display no-power'>00:00:00</div>\n    </div>\n  )\n}\n\nfunction PowerButton(props) {\n  // use the onClick provided by the parent\n  return <button className=\"power-button\" onClick={props.onClick}>Power</button>\n}\n\nfunction AlarmButton(props) {\n  return (\n    <span>\n      <button className=\"lower-button\" onClick={props.onClick}>SET ALARM</button>\n    </span>\n  )\n}\n\nfunction ChangeStationButton(props) {\n  return (\n    <span>\n      <button className=\"lower-button \" onClick={props.onClick}>SET STATION</button>\n    </span>\n  )\n}\n\nfunction GenericInput(props) {\n\n  let placeHolder = '00:00';\n  let display = 'none';\n\n  // whether or not to show at all\n  if (props.shouldShow) {\n    display = 'inline';\n  }\n  else {\n    display = 'none';\n  }\n\n  // show different info/placeholder based on what button was pressed\n  if (props.currentFunction === 'alarm') {\n    placeHolder = '00:00';\n  }\n\n  if (props.currentFunction === 'radio') {\n    placeHolder = 'not yet implemented'\n  }\n\n  // display info bassedon on current function\n  return (\n    <div style={{ display: display }}>\n      <div className=\"input-info\">\n        {props.currentFunction === 'alarm' ? 'Set an alarm to go off at the specified time.  Remember to keep the clock powered on!' : null}</div>\n      <div style={{ textAlign: 'center' }}><input type=\"text\" className=\"generic-input\" placeholder={placeHolder}></input>\n        <button className=\"lower-button\" onClick={props.handleNewInput}>SET</button>\n      </div>\n    </div >\n  )\n}\n\nclass Tuner extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberOfStations: 5,\n      stations: []\n    }\n  }\n\n  // when the component has rendered, update the station list with some random stations\n  componentDidMount() {\n    this.populateStations();\n  }\n\n  populateStations() {\n    const newStations = this.state.stations.slice();\n    for (let i = 0; i < this.state.numberOfStations; i++) {\n      newStations[i] = {\n        stationNumber: (Math.random() * (105 - 90) + 90).toFixed(1), // random num max - min + min = 90 to 105\n        stationKey: i\n      };\n    }\n\n    // sort the stations so they appear as you would expect on a tuner\n    newStations.sort((a, b) => {\n      if (Number(a.stationNumber) > Number(b.stationNumber)) {\n        return 1;\n      }\n      else if (Number(a.stationNumber) < Number(b.stationNumber)) {\n        return -1;\n      }\n      else {\n        return 0;\n      }\n    });\n\n    this.setState({\n      stations: newStations\n    });\n  }\n\n  render() {\n    const stationItems = this.state.stations.map(station => {\n      return (\n        // keys must be unique so give the array index\n        // this is okay if we aren't moving them around or adding/deleting\n        <div key={station.stationKey} className=\"station\">{station.stationNumber}</div>\n      )\n    });\n\n    let tunerParentClass = !this.props.hasPower ? 'tuner' : 'tuner power-shadow';\n    let tunerClass = !this.props.hasPower ? 'tuner-bar' : 'tuner-bar tuner-on';\n\n\n    return (\n      <div className={tunerParentClass}>\n        <div className={tunerClass}>\n          {stationItems}\n        </div >\n      </div>\n    )\n  }\n\n}\n\nclass AlarmBox extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasPower: false,\n      currentStation: null,\n      alarm: null,\n      canInputData: false,\n      currentFunction: null\n    }\n  }\n\n  handlePowerButtonClick() {\n    this.setState({\n      hasPower: !this.state.hasPower\n    });\n  }\n\n  handleAlarmButtonClick() {\n    this.setState({\n      canInputData: true,\n      currentFunction: 'alarm'\n    });\n  }\n\n  handleSetStationClick() {\n    this.setState({\n      canInputData: true,\n      currentFunction: 'radio'\n\n    });\n  }\n\n  handleNewInput(input) {\n    this.setState({\n      canInputData: false,\n      currentFunction: null\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"alarm-container\">\n          <PowerButton onClick={() => this.handlePowerButtonClick()} />\n          <div className=\"alarm-box\">\n            <Clock hasPower={this.state.hasPower} />\n            <Tuner hasPower={this.state.hasPower} />\n            <AlarmButton onClick={() => this.handleAlarmButtonClick()} />\n            <ChangeStationButton onClick={() => this.handleSetStationClick()} />\n\n          </div>\n          <div className=\"foot left-foot\"></div>\n          <div className=\"foot right-foot\"></div>\n          <GenericInput currentFunction={this.state.currentFunction} shouldShow={this.state.canInputData} handleNewInput={() => this.handleNewInput()} />\n\n        </div >\n      </div>\n\n\n\n    )\n  }\n}\n\n\nexport default AlarmBox;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AlarmBox from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AlarmBox />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}